#
# Copyright (c) 2017 Josef 'Jeff' Sipek <jeffpc@josefsipek.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

find_package(Hg)

if(HG_FOUND)
	# TODO:
	# (1) if there are local changes, append -dirty
	# (2) if latesttagdistance == 0, use only latesttag
	execute_process(
		COMMAND ${HG_EXECUTABLE} log -r . --template {latesttag}-{latesttagdistance}-{node|short}
		WORKING_DIRECTORY ${SOURCE_DIR}
		OUTPUT_VARIABLE HG_COMMIT_ID
		RESULT_VARIABLE res_var
	)
	if(NOT ${res_var} EQUAL 0)
		set(HG_COMMIT_ID "hg commit id unknown")
		message(WARNING "Mercurial failed (not a repo, or no tags). Build will not contain revision info.")
	endif()
else()
	set(HG_COMMIT_ID "unknown (hg not found!)")
	message(WARNING "Mercurial not found. Build will not contain revision info.")
endif()

set(vstring "/* version.h - Generated by cmake. Changes will be lost! */\n"
	"#ifndef __LIBJEFFPC_INTERNAL_VERSION_H\n"
	"#define __LIBJEFFPC_INTERNAL_VERSION_H\n"
	"#define VERSION \"${HG_COMMIT_ID}\"\n"
	"#endif\n")

file(WRITE version.h.txt ${vstring})
# copy the file to the final header only if the version changes
# reduces needless rebuilds
execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different
                        version.h.txt ${BINARY_DIR}/version.h)
execute_process(COMMAND ${CMAKE_COMMAND} -E remove version.h.txt)
